spring.application.name=agile-tracker

# PostgreSQL Configuration
spring.datasource.url=jdbc:postgresql://localhost:5432/postgres
spring.datasource.username=postgres
spring.datasource.password=postgres
spring.datasource.driver-class-name=org.postgresql.Driver

# Hibernate Configuration
spring.jpa.hibernate.ddl-auto=none
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# HikariCP settings
spring.datasource.hikari.connection-timeout=60000
spring.datasource.hikari.maximum-pool-size=20

# Actuator Configuration
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always

# JWT secret
jwt.secret=V3OmNw3QQ1dBMuS4EFJk3+unXEYWuehUWRH03RuEczY=

# Swagger settings
springdoc.api-docs.path=/api-docs
springdoc.swagger-ui.path=/swagger-ui.html

# Redis config
spring.data.redis.host=localhost
spring.data.redis.port=6379

# Queries
app.user.verify.query=select * from project_management.user where username = ?
app.user.login.query=select email from project_management.user where username = ? and password = ?
app.user.login.query.v2=select * from project_management.user where username = ? and password = ?
app.user.details.query=select * from project_management.user where username = ?


# Project CRUD queries
project.read.query=SELECT * FROM project_management.project WHERE id = ?;
project.create.query=INSERT INTO project_management.project(name, description, start_date, end_date, status, created_by, created_on, modified_by, modified_on)VALUES (?, ?, ?, ?, ?, ?, now(), ?, now());
project.read.all.query=SELECT * FROM project_management.project WHERE created_by = ?;
project.update.query=UPDATE project_management.project SET name = ?, description = ?, start_date = ?, end_date = ?, status = ?, modified_by = ?, modified_on = now() WHERE id = ?;
project.delete.query=DELETE FROM project_management.project WHERE id = ?;

# Task CRUD queries
task.create.query=INSERT INTO project_management.task(proj_id, title, description, assignee, priority, status, due_date, created_by, created_on, modified_by, modified_on)VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);
task.read.query=SELECT * FROM project_management.task WHERE id = ?;
task.read.all.query=SELECT * FROM project_management.task WHERE proj_id = ?;
task.update.query=UPDATE project_management.task SET title = ?, description = ?, assignee = ?, priority = ?, status = ?, due_date = ?, modified_by = ?, modified_on = now() WHERE id = ?;
task.delete.query=DELETE FROM project_management.task WHERE id = ?;

# Audit queries
audit.create.query=INSERT INTO project_management.audit(user_id, created_on, event)VALUES(?, ?, ?::json);
audit.read.all.query=SELECT * FROM project_management.audit;

# File Upload
file.upload-dir=./uploads
#task.file.upload.query=INSERT INTO project_management.attachment(file_name, file_type, file_path, file_url, proj_id, task_id, uploaded_by, uploaded_on)VALUES (?, ?, ?, ?, ?, ?, ?, ?);
task.file.upload.query=INSERT INTO project_management.attachment (task_id, file_name, file_path, uploaded_by, uploaded_on) VALUES (?, ?, ?, ?, now());